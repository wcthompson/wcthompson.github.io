//Colors
$background: #fefefe;
$text: #4b507a;

$cyan: #60daaa;
$yellow: #fbca67;
$orange: #ff8a30;
$pinkish: #F45D8A;
$purple: #6477b9;
$blue: #0eb7da;

body{
  font: 20px "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  background-image: url("../gifs/back1.gif");
  background-color: white;
  background-size: cover;
  color: black;
  overflow: auto;
}
main {
  display: block;
  justify-content:center;
  align-items:center;
  width: 100%;
  height: 400px;
  position: relative;
}

#navbox {
  height: auto;
  width: 300px;
  background: none;
  padding: 20px;
  resize: none;
  overflow: none;
  left: 50%;
  right: 50%;
  margin: 100px 0 0 -150px;
  position: absolute;
}

#name {
  text-align: center;
  color: white;
  width: 265px;
}


#menu {
  background: none;
  list-style-type: none;
  margin-bottom: 10px;
  position: relative;
}

li.menu-item {
  color:white;
  width:200px;
  height:20px;
  font-size: 16px;
  background: rgba(255, 255, 255, .2);
  display: block;
  letter-spacing: 4px;
  margin-bottom: 10px;
  cursor: pointer;
  left: -20px;
}

#links {
  position: relative;
  left: 20px;
}

#tumblr {
  background: url(../image/tumblr.png) no-repeat;
  background-size: contain;
}

#email {
  background: url(../image/mail.png) no-repeat;
  background-size: contain;
}

.icon {
  display: inline-block;
  cursor: pointer;
  height: 20px;
  width: 20px;
  z-index: 2;
  padding-right: 10px;
}



#section-container {
  height: auto;
  left: 50%;
  margin: 100px 0 0 -250px;
  position: absolute;
}

#section-title {
  color: $cyan;
}

#section-content {
  height: auto;
  background-color: rgba(255, 255, 255, .2);
  padding: 10px;
  cursor: default;
  border: 2px solid $cyan;
  text-align: center;
}

.thumb {
  display: inline-block;
  width: 200px;
  height: 200px;
  margin: 5px;
  /*background-color: rgba(100, 100, 100, 1);*/
  border: none;
  background: url(../image/twinkle.gif);
  &:hover {
    color: rgba(255,255,255, .2);
    border: 2px solid $pinkish;
  }
}

#about-main {
  color: white;
  display: inline-block;
  max-width: 800px;
}

#about-main p {
  letter-spacing: 2px;
  text-transform: lowercase;
}

#about-picture {
  display: inherit;
  min-width: 250px;
  min-height: 250px;
  width: 100%;
  height: 100%;
  background: url(../image/face.jpg) repeat;
}

#about-text {
  height: auto;
  letter-spacing: 2px;
  text-transform: lowercase;
  margin: 0;
}

.path {
  stroke:$cyan;
  stroke-width:2;
  display: inline-block;
}

// Basic styles
button {
  cursor: pointer;
  outline: none;
  background: none;
  border: 0;
  box-sizing: border-box;
  box-shadow: inset 0 0 0 2px #aaa;
  font-size: inherit;
  margin: 5px;
  padding: 1em 2em;
  text-align: center;
  text-transform: capitalize;
  // Required, since we're setting absolute on pseudo-elements
  position: relative;
  vertical-align: middle;

  &::before,
  &::after {
    box-sizing: border-box;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
  }
}

.draw {
    transition: color 0.25s;

  &::before,
  &::after {
    border: 2px solid transparent; // Set border to invisible, so we don't see a 4px border on a 0x0 element before the transition starts
    width: 0;
    height: 0;
  }

  // This covers the top & right borders (expands right, then down)
  &::before {
    top: 0;
    left: 0;
  }

  // And this the bottom & left borders (expands left, then up)
  &::after {
    bottom: 0;
    right: 0;
  }

  &:hover {
  }

  // Hover styles
  &:hover::before,
  &:hover::after {
    width: 100%;
    height: 100%;
  }

  &:hover::before {
    border-top-color: $cyan; // Make borders visible
    border-right-color: $cyan;
    transition:
      width 0.5s linear, // Width expands first
      height 0.5s linear; // And then height
  }

  &:hover::after {
    border-bottom-color: $cyan; // Make borders visible
    border-left-color: $cyan;
    transition:
      border-color 0s linear, // Wait for ::before to finish before showing border
      width 0.5s linear, // And then exanding width
      height 0.5s linear; // And finally height
  }
}

/* REGULAR SCANLINES SETTINGS */

    // width of 1 scanline (min.: 1px)
    $scan-width: 2px;

    // emulates a damage-your-eyes bad pre-2000 CRT screen ♥ (true, false)
    $scan-crt: true;

    // frames-per-second (should be > 1), only applies if $scan-crt: true;
    $scan-fps: 60;

    // scanline-color (rgba)
    $scan-color: rgba(#000, .3);

    // set z-index on 8, like in ♥ 8-bits ♥, or…
    // set z-index on 2147483648 or more to enable scanlines on Chrome fullscreen (doesn't work in Firefox or IE);
    $scan-z-index: 2147483648;

/* MOVING SCANLINE SETTINGS */

    // moving scanline (true, false)
    $scan-moving-line: true;

    // opacity of the moving scanline
    $scan-opacity: .75;

/* MIXINS */

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-crt($scan-crt) {
        @if $scan-crt == true {
            animation: scanlines 1s steps($scan-fps) infinite;
        }
        @else { animation: none; }
    }

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-moving($scan-moving-line) {
        @if $scan-moving-line == true {
            animation: scanline 6s linear infinite;
        }
        @else { animation: none; }
    }

/* CSS .scanlines CLASS */

    .scanlines {
        position: relative;
        overflow: hidden; // only to animate the unique scanline

        &:before,
        &:after {
            display: block;
            pointer-events: none;
            content: '';
            position: absolute;
        }

        // unique scanline travelling on the screen
        &:before {
            // position: absolute;
            // bottom: 100%;
            width: 100%;
            height: $scan-width * 1;
            z-index: $scan-z-index + 1;
            background: $scan-color;
            opacity: $scan-opacity;
            // animation: scanline 6s linear infinite;
            @include scan-moving($scan-moving-line);
        }

        // the scanlines, so!
        &:after {
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: $scan-z-index;
            background: linear-gradient(
                to bottom,
                transparent 50%,
                $scan-color 51%
            );
            background-size: 100% $scan-width*2;
            @include scan-crt($scan-crt);
        }
    }

/* ANIMATE UNIQUE SCANLINE */
    @keyframes scanline {
        0% {
            transform: translate3d(0,200000%,0);
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }

    @keyframes scanlines {
        0% {
            background-position: 0 50%;
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }


